{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_BASE_URL = environment.api.base;\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    http;\n    constructor(http) {\n      this.http = http;\n    }\n    headers = new HttpHeaders().set('Content-Type', 'application/json');\n    get(requestUri) {\n      console.log(API_BASE_URL + requestUri);\n      return this.http.get(API_BASE_URL + requestUri, {\n        headers: this.headers\n      }).pipe(catchError(this.handleError));\n    }\n    post(requestUri, data) {\n      return this.http.post(API_BASE_URL + requestUri, data).pipe(catchError(this.handleError));\n    }\n    put(requestUri, data) {\n      console.log('in api put');\n      console.log(requestUri);\n      console.log(data);\n      return this.http.put(API_BASE_URL + requestUri, data).pipe(catchError(this.handleError));\n    }\n    delete(requestUri) {\n      return this.http.delete(API_BASE_URL + requestUri).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      console.error('ApiService::handleError', error);\n      return throwError(() => new Error(error.message || 'server error.'));\n    }\n    static ɵfac = function ApiService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root' // TODO: figure out how to inject service instead of being at root of app\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}