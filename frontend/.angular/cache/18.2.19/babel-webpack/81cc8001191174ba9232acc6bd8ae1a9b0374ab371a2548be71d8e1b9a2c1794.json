{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_BASE_URL = environment.api.base;\nexport class ApiService {\n  http;\n  constructor(http) {\n    this.http = http;\n  }\n  headers = new HttpHeaders().set('Content-Type', 'application/json');\n  get(requestUri) {\n    console.log(API_BASE_URL + requestUri);\n    return this.http.get(API_BASE_URL + requestUri, {\n      headers: this.headers\n    }).pipe(catchError(this.handleError));\n  }\n  post(requestUri, data) {\n    return this.http.post(API_BASE_URL + requestUri, data).pipe(catchError(this.handleError));\n  }\n  put(requestUri, data) {\n    console.log('in api put');\n    console.log(requestUri);\n    console.log(data);\n    return this.http.put(API_BASE_URL + requestUri, data).pipe(catchError(this.handleError));\n  }\n  delete(requestUri) {\n    return this.http.delete(API_BASE_URL + requestUri).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('ApiService::handleError', error);\n    return throwError(() => new Error(error.message || 'server error.'));\n  }\n  static ɵfac = function ApiService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root' // TODO: figure out how to inject service instead of being at root of app\n  });\n}","map":{"version":3,"names":["throwError","catchError","environment","HttpHeaders","API_BASE_URL","api","base","ApiService","http","constructor","headers","set","get","requestUri","console","log","pipe","handleError","post","data","put","delete","error","Error","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/frontend/src/app/service/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { environment } from '../../environments/environment';\nimport {HttpHeaders, HttpClient, HttpErrorResponse} from '@angular/common/http';\nconst API_BASE_URL = environment.api.base;\n\n@Injectable({\n  providedIn: 'root' // TODO: figure out how to inject service instead of being at root of app\n})\nexport class ApiService {\n  constructor(private http: HttpClient) {}\n  headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  public get(requestUri: string): Observable<any> {\n    console.log(API_BASE_URL + requestUri);\n    return this.http\n      .get(API_BASE_URL + requestUri, {headers: this.headers})\n      .pipe(catchError(this.handleError));\n  }\n\n  public post(requestUri: string, data: any): Observable<any> {\n    return this.http\n      .post(API_BASE_URL + requestUri, data)\n      .pipe(catchError(this.handleError));\n  }\n\n   public put(requestUri: string, data: any): Observable<any> {\n    console.log('in api put');\n    console.log(requestUri);\n    console.log(data);\n    return this.http\n      .put(API_BASE_URL + requestUri, data)\n      .pipe(catchError(this.handleError));\n  }\n\n  public delete(requestUri: string) {\n    return this.http\n      .delete(API_BASE_URL + requestUri)\n      .pipe(catchError(this.handleError));\n  }\n\n\n  private handleError(error: HttpErrorResponse | any) {\n    console.error('ApiService::handleError', error);\n    return throwError(() => new Error(error.message || 'server error.'));\n  }\n\n}\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAAcC,UAAU,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,gCAAgC;AAC5D,SAAQC,WAAW,QAAsC,sBAAsB;;;AAC/E,MAAMC,YAAY,GAAGF,WAAW,CAACG,GAAG,CAACC,IAAI;AAKzC,OAAM,MAAOC,UAAU;EACDC,IAAA;EAApBC,YAAoBD,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EACvCE,OAAO,GAAG,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;EAE5DC,GAAGA,CAACC,UAAkB;IAC3BC,OAAO,CAACC,GAAG,CAACX,YAAY,GAAGS,UAAU,CAAC;IACtC,OAAO,IAAI,CAACL,IAAI,CACbI,GAAG,CAACR,YAAY,GAAGS,UAAU,EAAE;MAACH,OAAO,EAAE,IAAI,CAACA;IAAO,CAAC,CAAC,CACvDM,IAAI,CAACf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAAC;EACvC;EAEOC,IAAIA,CAACL,UAAkB,EAAEM,IAAS;IACvC,OAAO,IAAI,CAACX,IAAI,CACbU,IAAI,CAACd,YAAY,GAAGS,UAAU,EAAEM,IAAI,CAAC,CACrCH,IAAI,CAACf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAAC;EACvC;EAEQG,GAAGA,CAACP,UAAkB,EAAEM,IAAS;IACvCL,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzBD,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;IACvBC,OAAO,CAACC,GAAG,CAACI,IAAI,CAAC;IACjB,OAAO,IAAI,CAACX,IAAI,CACbY,GAAG,CAAChB,YAAY,GAAGS,UAAU,EAAEM,IAAI,CAAC,CACpCH,IAAI,CAACf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAAC;EACvC;EAEOI,MAAMA,CAACR,UAAkB;IAC9B,OAAO,IAAI,CAACL,IAAI,CACba,MAAM,CAACjB,YAAY,GAAGS,UAAU,CAAC,CACjCG,IAAI,CAACf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAAC;EACvC;EAGQA,WAAWA,CAACK,KAA8B;IAChDR,OAAO,CAACQ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAOtB,UAAU,CAAC,MAAM,IAAIuB,KAAK,CAACD,KAAK,CAACE,OAAO,IAAI,eAAe,CAAC,CAAC;EACtE;;qCApCWjB,UAAU,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;;WAAVrB,UAAU;IAAAsB,OAAA,EAAVtB,UAAU,CAAAuB,IAAA;IAAAC,UAAA,EAFT,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}